TestCase subclass: #AlgoViajesTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Casos-De-Uso'!!AlgoViajesTest methodsFor: 'tests' stamp: 'Nicolas 4/14/2023 21:39'!test01ElViajeSegunCriterioNoExistenteDebeLevantarUnaExcepcion	"assert"	self		should: [ AlgoViajes ConCriterio: 'Intermedio' ]		raise: CriterioNoEncontradoException! !!AlgoViajesTest methodsFor: 'tests' stamp: 'Nicolas 4/16/2023 14:56'!test03AlgoViajesDevuelveAlgoDeTipoCriterioCorrecto	|algoViajes pasaje tarifaEsperada|	"Arrange"	algoViajes := AlgoViajes ConCriterio: 'Maximo'.	tarifaEsperada := (5000 * 1.28 -1500) raisedTo:1.2.		algoViajes 	registrarPasajePara: 'Fede' deNacionalidad: 'Española' conDestinoACiudad: 'BuenosAires' delPais: 'Argentina' aKms: 5000.		"Act"	pasaje := algoViajes viajeIndicadoSegunCriterioPara: 'Fede'.		"Arrange"	self		assert: pasaje tarifa equals: tarifaEsperada 	! !!AlgoViajesTest methodsFor: 'tests' stamp: 'Nicolas 4/14/2023 21:39'!test02ElViajeSegunCriterioExistenteNoDebeLevantarUnaExcepcion		"assert"	self		shouldnt: [ AlgoViajes ConCriterio: 'Minimo' ]		raise: CriterioNoEncontradoException! !TestCase subclass: #CiudadEsperadaTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Casos-De-Uso'!!CiudadEsperadaTest methodsFor: 'tests' stamp: 'Nicolas 4/15/2023 17:01'!test01LaCiudadEsperadaDebeSerLaCorrecta	|ciudadObtenida|		"Arrange"	ciudadObtenida := CiudadEsperada nombre: 'Chieti' en: 'Italia'. 		"Assert"		self		assert: ciudadObtenida 		equals: (CiudadEsperada nombre: 'Chieti' en: 'Italia').		! !!CiudadEsperadaTest methodsFor: 'tests' stamp: 'Nicolas 4/15/2023 17:05'!test02ElNombreDeLaciudadEsperadaDebeSerElCorrecto	|ciudadObtenida ciudadEsperada ciudad|	"Arrange"	ciudadObtenida := CiudadEsperada nombre: 'Frankfurt' en: 'Alemania'.	ciudadEsperada := 'Frankfurt'.		"Act"	ciudad := ciudadObtenida nombre.		"Assert"	self assert: ciudad equals: ciudadEsperada ! !!CiudadEsperadaTest methodsFor: 'tests' stamp: 'Nicolas 4/16/2023 14:42'!test03ElNombreDeLaCiudadEsperadaEsdiferente	|ciudadObtenida ciudadEsperada |	"Arrange"	ciudadObtenida := CiudadEsperada nombre: 'Frankfurt' en: 'Alemania'.	ciudadEsperada := CiudadEsperada nombre: 'Cuzco' en: 'Peru'.		self	deny: ciudadObtenida equals: ciudadEsperada 	! !TestCase subclass: #CriterioMaxTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Casos-De-Uso'!!CriterioMaxTest methodsFor: 'tests' stamp: 'Nicolas 4/16/2023 12:51'!test01ElUnicoViajeParaUnUsuarioNacionalHaciaDestinoNacionalExisteYEsElIndicado	| algoViajes viajeObtenido tarifaEsperada |	"Arrange"	algoViajes := CriterioMax new.	algoViajes		registrarPasajePara: 'Julieta'		deNacionalidad: 'Argentina'		conDestinoACiudad: 'San Carlos'		delPais: 'Argentina'		aKms: 1620. "Literal kilometros en linea recta Buenos Aires - Madrid"	tarifaEsperada := (1620 * 1.28) sqrt * 1.2. "Kms" "tarifa destino nacional" "Descuento turismo nacional" "Impuesto para turistas nacionales"	"Act"	viajeObtenido := algoViajes viajeIndicadoSegunCriterioPara: 'Julieta'.	"Assert"	self		assert: viajeObtenido destino		equals: (CiudadEsperada nombre: 'San Carlos' en: 'Argentina').	self assert: viajeObtenido tarifa equals: tarifaEsperada! !!CriterioMaxTest methodsFor: 'tests' stamp: 'Nicolas 4/16/2023 12:51'!test08ElViajeMasCaroParaUnNoExtranjeroEsElIndicado	| algoViajes viajeObtenido tarifaEsperada |	"Arrange"	algoViajes := CriterioMax new.	algoViajes		registrarPasajePara: 'Leti'		deNacionalidad: 'Argentina'		conDestinoACiudad: 'San Carlos'		delPais: 'Argentina'		aKms: 2000.	algoViajes		registrarPasajePara: 'Leti'		deNacionalidad: 'Argentina'		conDestinoACiudad: 'Frankfurt'		delPais: 'Alemania'		aKms: 6700.	algoViajes		registrarPasajePara: 'Leti'		deNacionalidad: 'Argentina'		conDestinoACiudad: 'Montevideo'		delPais: 'Uruguay'		aKms: 1173.	tarifaEsperada := 6700 log + 3600 * 1.2. "Kms" "tarifa destino internacional" "Impuesto al viaje para turistas nacionales"	"Act"	viajeObtenido := algoViajes viajeIndicadoSegunCriterioPara: 'Leti'.	"Assert"	self		assert: viajeObtenido destino		equals: (CiudadEsperada nombre: 'Frankfurt' en: 'Alemania').	self assert: viajeObtenido tarifa equals: tarifaEsperada! !!CriterioMaxTest methodsFor: 'tests' stamp: 'Nicolas 4/16/2023 12:51'!test13ElViajeSegunCriterioParaDebeLanzarUnaExcepcionSiLaPersonaNoExiste	| algoViajes|	"Arrange"	algoViajes := CriterioMax new.	algoViajes		registrarPasajePara: 'Julieta'		deNacionalidad: 'Argentina'		conDestinoACiudad: 'Madrid'		delPais: 'España'		aKms: 11000.	"Assert"	self	should: [ algoViajes viajeIndicadoSegunCriterioPara: 'Martu'  ] raise: PersonaNoEncontradaException ! !!CriterioMaxTest methodsFor: 'tests' stamp: 'Nicolas 4/16/2023 12:51'!test07ElViajeMasCaroParaUnExtranjeroEsElIndicado	| algoViajes viajeObtenido tarifaEsperada |	"Arrange"	algoViajes := CriterioMax new.	algoViajes		registrarPasajePara: 'Fran'		deNacionalidad: 'Italiana'		conDestinoACiudad: 'Cuzco'		delPais: 'Peru'		aKms: 5600.	algoViajes		registrarPasajePara: 'Fran'		deNacionalidad: 'Italiana'		conDestinoACiudad: 'Buenos Aires'		delPais: 'Argentina'		aKms: 4000.	algoViajes		registrarPasajePara: 'Fran'		deNacionalidad: 'Italiana'		conDestinoACiudad: 'Chieti'		delPais: 'Italia'		aKms: 6473.	tarifaEsperada := 5600 raisedTo: 1.12. "Kms" "tarifa destino mercosur" "No hay descuento"	tarifaEsperada := tarifaEsperada raisedTo: 1.2. "Recargo por Extranjero"	"Act"	viajeObtenido := algoViajes viajeIndicadoSegunCriterioPara: 'Fran'.	"Assert"	self		assert: viajeObtenido destino		equals: (CiudadEsperada nombre: 'Cuzco' en: 'Peru').	self assert: viajeObtenido tarifa equals: tarifaEsperada! !!CriterioMaxTest methodsFor: 'tests' stamp: 'Nicolas 4/16/2023 12:51'!test06ElViajeParaUnUsuarioExtranjeroConDestinoMercosurExisteYEsElIndicado	| algoViajes viajeObtenido tarifaEsperada |	"Arrange"	algoViajes := CriterioMax new.	algoViajes		registrarPasajePara: 'Fran'		deNacionalidad: 'Italiana'		conDestinoACiudad: 'Cuzco'		delPais: 'Peru'		aKms: 5600.	tarifaEsperada := 5600 raisedTo: 1.12. "Kms" "tarifa destino mercosur" "No hay descuento de extranjero a viaje a sudamerica"	tarifaEsperada := tarifaEsperada raisedTo: 1.2. "Recargo por Extranjero"	"Act"	viajeObtenido := algoViajes viajeIndicadoSegunCriterioPara: 'Fran'.	"Assert"	self		assert: viajeObtenido destino		equals: (CiudadEsperada nombre: 'Cuzco' en: 'Peru').	self assert: viajeObtenido tarifa equals: tarifaEsperada! !!CriterioMaxTest methodsFor: 'tests' stamp: 'Nicolas 4/16/2023 12:51'!test03ElUnicoViajeParaUnUsuarioNacionalHaciaDestinoMercosurExisteYEsElIndicado	| algoViajes viajeObtenido tarifaEsperada |	"Arrange"	algoViajes := CriterioMax new.	algoViajes		registrarPasajePara: 'Fede'		deNacionalidad: 'Argentina'		conDestinoACiudad: 'Cusco'		delPais: 'Peru'		aKms: 2000. "Literal kilometros en linea recta Buenos Aires - Madrid"	tarifaEsperada := (2000 raisedTo: 1.12) * 1.2. "Kms" "tarifa destino mercosur" "Impuesto turistas nacionales"	"Act"	viajeObtenido := algoViajes viajeIndicadoSegunCriterioPara: 'Fede'.	"Assert"	self		assert: viajeObtenido destino		equals: (CiudadEsperada nombre: 'Cusco' en: 'Peru').	self assert: viajeObtenido tarifa equals: tarifaEsperada! !!CriterioMaxTest methodsFor: 'tests' stamp: 'Nicolas 4/16/2023 12:51'!test09ElViajeMasCaroParaUnExtranjeroEsElIndicado	| algoViajes viajeObtenido tarifaEsperada |	"Arrange"	algoViajes := CriterioMax new.	algoViajes		registrarPasajePara: 'Ari'		deNacionalidad: 'Italiana'		conDestinoACiudad: 'San Carlos'		delPais: 'Argentina'		aKms: 2000.	algoViajes		registrarPasajePara: 'Ari'		deNacionalidad: 'Italiana'		conDestinoACiudad: 'Frankfurt'		delPais: 'Alemania'		aKms: 6700.	algoViajes		registrarPasajePara: 'Ari'		deNacionalidad: 'Italiana'		conDestinoACiudad: 'Montevideo'		delPais: 'Uruguay'		aKms: 1173.	tarifaEsperada := 6700 log + 3600. "Kms" "tarifa destino internacional" "Impuesto al viaje para turistas nacionales"	tarifaEsperada := tarifaEsperada raisedTo: 1.2. "Recargo por Extranjero"	"Act"	viajeObtenido := algoViajes viajeIndicadoSegunCriterioPara: 'Ari'.	"Assert"	self		assert: viajeObtenido destino		equals: (CiudadEsperada nombre: 'Frankfurt' en: 'Alemania').	self assert: viajeObtenido tarifa equals: tarifaEsperada! !!CriterioMaxTest methodsFor: 'tests' stamp: 'Nicolas 4/16/2023 12:51'!test10ElViajeMasCaroParaUnUsuarioExtranjeroYNacionalEsElIndicado	| algoViajes viajeObtenidoAri viajeObtenidoJuli tarifaEsperadaAri tarifaEsperadaJuli |	"Arrange"	algoViajes := CriterioMax new.	algoViajes		registrarPasajePara: 'Ari'		deNacionalidad: 'Italiana'		conDestinoACiudad: 'San Carlos'		delPais: 'Argentina'		aKms: 2000.	algoViajes		registrarPasajePara: 'Ari'		deNacionalidad: 'Italiana'		conDestinoACiudad: 'Frankfurt'		delPais: 'Alemania'		aKms: 6700.	algoViajes		registrarPasajePara: 'Juli'		deNacionalidad: 'Argentina'		conDestinoACiudad: 'Valencia'		delPais: 'España'		aKms: 3000.	algoViajes		registrarPasajePara: 'Juli'		deNacionalidad: 'Argentina'		conDestinoACiudad: 'Buenos Aires'		delPais: 'Argentina'		aKms: 1173.	tarifaEsperadaAri := 6700 log + 3600. "Kms" "tarifa destino internacional"	tarifaEsperadaAri := tarifaEsperadaAri raisedTo: 1.2. "Recargo por Extranjero"	tarifaEsperadaJuli := tarifaEsperadaJuli := 3000 log + 3600 * 1.2. "Kms" "tarifa destino internacional" "Impuesto al viaje para turistas nacionales"	"Act"	viajeObtenidoAri := algoViajes viajeIndicadoSegunCriterioPara: 'Ari'.	viajeObtenidoJuli := algoViajes viajeIndicadoSegunCriterioPara:		                     'Juli'.	self		assert: viajeObtenidoAri destino		equals: (CiudadEsperada nombre: 'Frankfurt' en: 'Alemania').	"Assert"	self assert: viajeObtenidoAri tarifa equals: tarifaEsperadaAri.	self		assert: viajeObtenidoJuli destino		equals: (CiudadEsperada nombre: 'Valencia' en: 'España').	self assert: viajeObtenidoJuli tarifa equals: tarifaEsperadaJuli! !!CriterioMaxTest methodsFor: 'tests' stamp: 'Nicolas 4/16/2023 12:51'!test12ElCrearUnViajeConKmsInsuficientesDebeLanzarUnaExcepcion	| algoViajes |	"Arrange"	algoViajes := CriterioMax new.	"Assert"	self		should: [ 			algoViajes				registrarPasajePara: 'Julieta'				deNacionalidad: 'Argentina'				conDestinoACiudad: 'Birmingham'				delPais: 'Inglaterra'				aKms: 1171 ]		raise: KmsInsuficientesException! !!CriterioMaxTest methodsFor: 'tests' stamp: 'Nicolas 4/16/2023 12:51'!test05ElViajeParaUnUsuarioExtranjeroConDestinoInternacionalExisteYEsElIndicado	| algoViajes viajeObtenido tarifaEsperada |	"Arrange"	algoViajes := CriterioMax new.	algoViajes		registrarPasajePara: 'Martin'		deNacionalidad: 'Española'		conDestinoACiudad: 'Frankfurt'		delPais: 'Alemania'		aKms: 7500.	tarifaEsperada := 7500 log + 3600. "Kms" "tarifa destino internacional" "No hay descuento de extranjero a viaje internacional"	tarifaEsperada := tarifaEsperada raisedTo: 1.2. "Recargo por Extranjero"	"Act"	viajeObtenido := algoViajes viajeIndicadoSegunCriterioPara: 'Martin'.	"Assert"	self		assert: viajeObtenido destino		equals: (CiudadEsperada nombre: 'Frankfurt' en: 'Alemania').	self assert: viajeObtenido tarifa equals: tarifaEsperada! !!CriterioMaxTest methodsFor: 'tests' stamp: 'Nicolas 4/16/2023 12:51'!test11ElViajeAunDestinoInexistenteDebeLanzarUnaExcepcion	| algoViajes |	"Arrange"	algoViajes := CriterioMax new.	algoViajes		registrarPasajePara: 'Julieta'		deNacionalidad: 'Argentina'		conDestinoACiudad: 'Birmingham'		delPais: 'Inglaterra'		aKms: 11000.	"Assert"	self should: [ algoViajes viajeIndicadoSegunCriterioPara: 'Julieta' ] raise: DestinoNoEncontradoException 			! !!CriterioMaxTest methodsFor: 'tests' stamp: 'Nicolas 4/16/2023 12:51'!test02ElUnicoViajeParaUnUsuarioNacionalHaciaDestinoInternacionalExisteYEsElIndicado	| algoViajes viajeObtenido tarifaEsperada |	"Arrange"	algoViajes := CriterioMax new.	algoViajes		registrarPasajePara: 'Martu'		deNacionalidad: 'Argentina'		conDestinoACiudad: 'Madrid'		delPais: 'España'		aKms: 10000. "Literal kilometros en linea recta Buenos Aires - Madrid"	tarifaEsperada := 10000 log + 3600 * 1.2. "Kms" "tarifa destino internacional" "Impuesto al viaje para turistas nacionales"	"Act"	viajeObtenido := algoViajes viajeIndicadoSegunCriterioPara: 'Martu'.	"Assert"	self		assert: viajeObtenido destino		equals: (CiudadEsperada nombre: 'Madrid' en: 'España').	self assert: viajeObtenido tarifa equals: tarifaEsperada! !!CriterioMaxTest methodsFor: 'tests' stamp: 'Nicolas 4/16/2023 12:51'!test04ElViajeParaUnUsuarioExtranjeroConDestinoNacionalExisteYEsElIndicado	| algoViajes viajeObtenido tarifaEsperada |	"Arrange"	algoViajes := CriterioMax new.	algoViajes		registrarPasajePara: 'Juli'		deNacionalidad: 'Italiana'		conDestinoACiudad: 'Ushuaia'		delPais: 'Argentina'		aKms: 6000.	tarifaEsperada := 6000 * 1.28 - 1500. "Kms" "tarifa destino nacional" "Descuento por extranjero yendo a destino nacional"	tarifaEsperada := tarifaEsperada raisedTo: 1.2. "Recargo por Extranjero"	"Act"	viajeObtenido := algoViajes viajeIndicadoSegunCriterioPara: 'Juli'.	"Assert"	self		assert: viajeObtenido destino		equals: (CiudadEsperada nombre: 'Ushuaia' en: 'Argentina').	self assert: viajeObtenido tarifa equals: tarifaEsperada! !TestCase subclass: #CriterioMinTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Casos-De-Uso'!!CriterioMinTest methodsFor: 'tests' stamp: 'Nicolas 4/16/2023 12:51'!test01ElUnicoViajeParaUnUsuarioNacionalHaciaDestinoNacionalExisteYEsElIndicado	| algoViajes viajeObtenido tarifaEsperada |	"Arrange"	algoViajes := CriterioMin new.	algoViajes		registrarPasajePara: 'Julieta'		deNacionalidad: 'Argentina'		conDestinoACiudad: 'San Carlos'		delPais: 'Argentina'		aKms: 1620. "Literal kilometros en linea recta Buenos Aires - Madrid"	tarifaEsperada := (1620 * 1.28) sqrt * 1.2. "Kms" "tarifa destino nacional" "Descuento turismo nacional" "Impuesto para turistas nacionales"	"Act"	viajeObtenido := algoViajes viajeIndicadoSegunCriterioPara: 'Julieta'.	"Assert"	self		assert: viajeObtenido destino		equals: (CiudadEsperada nombre: 'San Carlos' en: 'Argentina').	self assert: viajeObtenido tarifa equals: tarifaEsperada! !!CriterioMinTest methodsFor: 'tests' stamp: 'Nicolas 4/16/2023 12:51'!test13ElViajeSegunCriterioParaDebeLanzarUnaExcepcionSiLaPersonaNoExiste	| algoViajes|	"Arrange"	algoViajes := CriterioMin new.	algoViajes		registrarPasajePara: 'Julieta'		deNacionalidad: 'Argentina'		conDestinoACiudad: 'Madrid'		delPais: 'España'		aKms: 11000.	"Assert"	self	should: [ algoViajes viajeIndicadoSegunCriterioPara: 'Martu'  ] raise: PersonaNoEncontradaException ! !!CriterioMinTest methodsFor: 'tests' stamp: 'Nicolas 4/16/2023 12:51'!test07ElViajeMasBaratoParaUnExtranjeroEsElIndicado	| algoViajes viajeObtenido tarifaEsperada |	"Arrange"	algoViajes := CriterioMin new.	algoViajes		registrarPasajePara: 'Fran'		deNacionalidad: 'Italiana'		conDestinoACiudad: 'Cuzco'		delPais: 'Peru'		aKms: 5600.	algoViajes		registrarPasajePara: 'Fran'		deNacionalidad: 'Italiana'		conDestinoACiudad: 'Buenos Aires'		delPais: 'Argentina'		aKms: 4000.	algoViajes		registrarPasajePara: 'Fran'		deNacionalidad: 'Italiana'		conDestinoACiudad: 'Chieti'		delPais: 'Italia'		aKms: 6473.	tarifaEsperada := 6473 log + 3600. "Kms" "tarifa destino internacional" "No hay descuento de extranjero a viaje internacional"	tarifaEsperada := tarifaEsperada raisedTo: 1.2. "Recargo por Extranjero"	"Act"	viajeObtenido := algoViajes viajeIndicadoSegunCriterioPara: 'Fran'.	"Assert"	self		assert: viajeObtenido destino		equals: (CiudadEsperada nombre: 'Chieti' en: 'Italia').	self assert: viajeObtenido tarifa equals: tarifaEsperada! !!CriterioMinTest methodsFor: 'tests' stamp: 'Nicolas 4/16/2023 12:51'!test06ElViajeParaUnUsuarioExtranjeroConDestinoMercosurExisteYEsElIndicado	| algoViajes viajeObtenido tarifaEsperada |	"Arrange"	algoViajes := CriterioMin new.	algoViajes		registrarPasajePara: 'Fran'		deNacionalidad: 'Italiana'		conDestinoACiudad: 'Cuzco'		delPais: 'Peru'		aKms: 5600.	tarifaEsperada := 5600 raisedTo: 1.12. "Kms" "tarifa destino mercosur" "No hay descuento de extranjero a viaje a sudamerica"	tarifaEsperada := tarifaEsperada raisedTo: 1.2. "Recargo por Extranjero"	"Act"	viajeObtenido := algoViajes viajeIndicadoSegunCriterioPara: 'Fran'.	"Assert"	self		assert: viajeObtenido destino		equals: (CiudadEsperada nombre: 'Cuzco' en: 'Peru').	self assert: viajeObtenido tarifa equals: tarifaEsperada! !!CriterioMinTest methodsFor: 'tests' stamp: 'Nicolas 4/16/2023 12:51'!test03ElUnicoViajeParaUnUsuarioNacionalHaciaDestinoMercosurExisteYEsElIndicado	| algoViajes viajeObtenido tarifaEsperada |	"Arrange"	algoViajes := CriterioMin new.	algoViajes		registrarPasajePara: 'Fede'		deNacionalidad: 'Argentina'		conDestinoACiudad: 'Cusco'		delPais: 'Peru'		aKms: 2000. "Literal kilometros en linea recta Buenos Aires - Madrid"	tarifaEsperada := (2000 raisedTo: 1.12) * 1.2. "Kms" "tarifa destino mercosur" "Impuesto turistas nacionales"	"Act"	viajeObtenido := algoViajes viajeIndicadoSegunCriterioPara: 'Fede'.	"Assert"	self		assert: viajeObtenido destino		equals: (CiudadEsperada nombre: 'Cusco' en: 'Peru').	self assert: viajeObtenido tarifa equals: tarifaEsperada! !!CriterioMinTest methodsFor: 'tests' stamp: 'Nicolas 4/16/2023 12:51'!test09ElViajeMasBaratoParaUnExtranjeroEsElIndicado	| algoViajes viajeObtenido tarifaEsperada |	"Arrange"	algoViajes := CriterioMin new.	algoViajes		registrarPasajePara: 'Ari'		deNacionalidad: 'Italiana'		conDestinoACiudad: 'San Carlos'		delPais: 'Argentina'		aKms: 2000.	algoViajes		registrarPasajePara: 'Ari'		deNacionalidad: 'Italiana'		conDestinoACiudad: 'Frankfurt'		delPais: 'Alemania'		aKms: 6700.	algoViajes		registrarPasajePara: 'Ari'		deNacionalidad: 'Italiana'		conDestinoACiudad: 'Montevideo'		delPais: 'Uruguay'		aKms: 1173.	tarifaEsperada := 2000 * 1.28 - 1500. "Kms" "tarifa destino nacional" "Descuento por extranjero yendo a destino nacional"	tarifaEsperada := tarifaEsperada raisedTo: 1.2. "Recargo por Extranjero"	"Act"	viajeObtenido := algoViajes viajeIndicadoSegunCriterioPara: 'Ari'.	"Assert"	self		assert: viajeObtenido destino		equals: (CiudadEsperada nombre: 'San Carlos' en: 'Argentina').	self assert: viajeObtenido tarifa equals: tarifaEsperada! !!CriterioMinTest methodsFor: 'tests' stamp: 'Nicolas 4/16/2023 12:51'!test12ElCrearUnViajeConKmsInsuficientesDebeLanzarUnaExcepcion	| algoViajes |	"Arrange"	algoViajes := CriterioMin new.	"Assert"	self		should: [ 			algoViajes				registrarPasajePara: 'Julieta'				deNacionalidad: 'Argentina'				conDestinoACiudad: 'Birmingham'				delPais: 'Inglaterra'				aKms: 1171 ]		raise: KmsInsuficientesException! !!CriterioMinTest methodsFor: 'tests' stamp: 'Nicolas 4/16/2023 12:51'!test05ElViajeParaUnUsuarioExtranjeroConDestinoInternacionalExisteYEsElIndicado	| algoViajes viajeObtenido tarifaEsperada |	"Arrange"	algoViajes := CriterioMax new.	algoViajes		registrarPasajePara: 'Martin'		deNacionalidad: 'Española'		conDestinoACiudad: 'Frankfurt'		delPais: 'Alemania'		aKms: 7500.	tarifaEsperada := 7500 log + 3600. "Kms" "tarifa destino internacional" "No hay descuento de extranjero a viaje internacional"	tarifaEsperada := tarifaEsperada raisedTo: 1.2. "Recargo por Extranjero"	"Act"	viajeObtenido := algoViajes viajeIndicadoSegunCriterioPara: 'Martin'.	"Assert"	self		assert: viajeObtenido destino		equals: (CiudadEsperada nombre: 'Frankfurt' en: 'Alemania').	self assert: viajeObtenido tarifa equals: tarifaEsperada! !!CriterioMinTest methodsFor: 'tests' stamp: 'Nicolas 4/16/2023 12:51'!test11ElViajeAunDestinoInexistenteDebeLanzarUnaExcepcion	| algoViajes |	"Arrange"	algoViajes := CriterioMin new.	algoViajes		registrarPasajePara: 'Julieta'		deNacionalidad: 'Argentina'		conDestinoACiudad: 'Birmingham'		delPais: 'Inglaterra'		aKms: 11000.	"Assert"	self should: [ algoViajes viajeIndicadoSegunCriterioPara: 'Julieta' ] raise: DestinoNoEncontradoException ! !!CriterioMinTest methodsFor: 'tests' stamp: 'Nicolas 4/16/2023 12:51'!test08ElViajeMasBaratoParaUnNoExtranjeroEsElIndicado	| algoViajes viajeObtenido tarifaEsperada |	"Arrange"	algoViajes := CriterioMin new.	algoViajes		registrarPasajePara: 'Leti'		deNacionalidad: 'Argentina'		conDestinoACiudad: 'San Carlos'		delPais: 'Argentina'		aKms: 2000.	algoViajes		registrarPasajePara: 'Leti'		deNacionalidad: 'Argentina'		conDestinoACiudad: 'Frankfurt'		delPais: 'Alemania'		aKms: 6700.	algoViajes		registrarPasajePara: 'Leti'		deNacionalidad: 'Argentina'		conDestinoACiudad: 'Montevideo'		delPais: 'Uruguay'		aKms: 1173.	tarifaEsperada := (2000 * 1.28) sqrt * 1.2. "Kms" "tarifa destino nacional" "Descuento turismo nacional" "Impuesto para turistas nacionales"	"Act"	viajeObtenido := algoViajes viajeIndicadoSegunCriterioPara: 'Leti'.	"Assert"	self		assert: viajeObtenido destino		equals: (CiudadEsperada nombre: 'San Carlos' en: 'Argentina').	self assert: viajeObtenido tarifa equals: tarifaEsperada! !!CriterioMinTest methodsFor: 'tests' stamp: 'Nicolas 4/16/2023 12:51'!test02ElUnicoViajeParaUnUsuarioNacionalHaciaDestinoInternacionalExisteYEsElIndicado	| algoViajes viajeObtenido tarifaEsperada |	"Arrange"	algoViajes := CriterioMin new.	algoViajes		registrarPasajePara: 'Martu'		deNacionalidad: 'Argentina'		conDestinoACiudad: 'Madrid'		delPais: 'España'		aKms: 10000. "Literal kilometros en linea recta Buenos Aires - Madrid"	tarifaEsperada := 10000 log + 3600 * 1.2. "Kms" "tarifa destino internacional" "Impuesto al viaje para turistas nacionales"	"Act"	viajeObtenido := algoViajes viajeIndicadoSegunCriterioPara: 'Martu'.	"Assert"	self		assert: viajeObtenido destino		equals: (CiudadEsperada nombre: 'Madrid' en: 'España').	self assert: viajeObtenido tarifa equals: tarifaEsperada! !!CriterioMinTest methodsFor: 'tests' stamp: 'Nicolas 4/16/2023 12:51'!test10ElViajeMasBaratoParaUnUsuarioExtranjeroYNacionalEsElIndicado	| algoViajes viajeObtenidoAri viajeObtenidoJuli tarifaEsperadaAri tarifaEsperadaJuli |	"Arrange"	algoViajes := CriterioMin new.	algoViajes		registrarPasajePara: 'Ari'		deNacionalidad: 'Italiana'		conDestinoACiudad: 'San Carlos'		delPais: 'Argentina'		aKms: 2000.	algoViajes		registrarPasajePara: 'Ari'		deNacionalidad: 'Italiana'		conDestinoACiudad: 'Frankfurt'		delPais: 'Alemania'		aKms: 6700.	algoViajes		registrarPasajePara: 'Juli'		deNacionalidad: 'Argentina'		conDestinoACiudad: 'Valencia'		delPais: 'España'		aKms: 3000.	algoViajes		registrarPasajePara: 'Juli'		deNacionalidad: 'Argentina'		conDestinoACiudad: 'Buenos Aires'		delPais: 'Argentina'		aKms: 1173.	tarifaEsperadaAri := 2000 * 1.28 - 1500. "Kms" "tarifa destino nacional" "Descuento por extranjero yendo a destino nacional"	tarifaEsperadaAri := tarifaEsperadaAri raisedTo: 1.2. "Recargo por Extranjero"		tarifaEsperadaJuli := (1173 * 1.28) sqrt * 1.2. "Kms" "tarifa destino nacional" "Descuento turismo nacional" "Impuesto para turistas nacionales"	"Act"	viajeObtenidoAri := algoViajes viajeIndicadoSegunCriterioPara: 'Ari'.	viajeObtenidoJuli := algoViajes viajeIndicadoSegunCriterioPara:		                     'Juli'.	self		assert: viajeObtenidoAri destino		equals: (CiudadEsperada nombre: 'San Carlos' en: 'Argentina').	"Assert"	self assert: viajeObtenidoAri tarifa equals: tarifaEsperadaAri.	self		assert: viajeObtenidoJuli destino		equals: (CiudadEsperada nombre: 'Buenos Aires' en: 'Argentina').	self assert: viajeObtenidoJuli tarifa equals: tarifaEsperadaJuli! !!CriterioMinTest methodsFor: 'tests' stamp: 'Nicolas 4/16/2023 12:51'!test04ElViajeParaUnUsuarioExtranjeroConDestinoNacionalExisteYEsElIndicado	| algoViajes viajeObtenido tarifaEsperada |	"Arrange"	algoViajes := CriterioMin new.	algoViajes		registrarPasajePara: 'Juli'		deNacionalidad: 'Italiana'		conDestinoACiudad: 'Ushuaia'		delPais: 'Argentina'		aKms: 6000.	tarifaEsperada := 6000 * 1.28 - 1500. "Kms" "tarifa destino nacional" "Descuento por extranjero yendo a destino nacional"	tarifaEsperada := tarifaEsperada raisedTo: 1.2. "Recargo por Extranjero"	"Act"	viajeObtenido := algoViajes viajeIndicadoSegunCriterioPara: 'Juli'.	"Assert"	self		assert: viajeObtenido destino		equals: (CiudadEsperada nombre: 'Ushuaia' en: 'Argentina').	self assert: viajeObtenido tarifa equals: tarifaEsperada! !TestCase subclass: #ExtranjeroTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Casos-De-Uso'!!ExtranjeroTest methodsFor: 'tests' stamp: 'Nicolas 4/15/2023 13:06'!test01UnaNacionalidadInexistenteDebeLanzarUnaExcepcionDelTipoNacionalidadNoEncontradaException	| nacionalidad extranjero |		"Arrange"	extranjero := Extranjero new.	nacionalidad := 'Inglesa'.		"assert"	self		should: [ extranjero esExtranjero: nacionalidad ]		raise: NacionalidadNoEncontradaException! !!ExtranjeroTest methodsFor: 'tests' stamp: 'Nicolas 4/15/2023 13:09'!test02UnaNacionalidadExistenteNoDebeLanzarUnaExcepcion	| nacionalidad extranjero |	"Arrange"	extranjero := Extranjero new.	nacionalidad := 'Alemana'.	"Assert"	self shouldnt: [ extranjero esExtranjero: nacionalidad  ] raise: NacionalidadNoEncontradaException ! !!ExtranjeroTest methodsFor: 'tests' stamp: 'Nicolas 4/15/2023 13:13'!test03DadaUnaNacionalidadNoExtranjeraDebeSerNoExtranjera	|nacionalidad extranjero valorObtenido valorEsperado|	"Arrange"	extranjero := Extranjero new.	nacionalidad := 'Argentina'.	valorEsperado := 'noExtranjero'.		"Act"	valorObtenido := extranjero esExtranjero: nacionalidad.		"Assert"	self assert: valorObtenido equals: valorEsperado ! !!ExtranjeroTest methodsFor: 'tests' stamp: 'Nicolas 4/15/2023 13:14'!test04DadaUnaNacionalidadExtranjeraDebeSerExtranjera	| nacionalidad extranjero valorObtenido valorEsperado |	"Arrange"	extranjero := Extranjero new.	nacionalidad := 'Uruguaya'.	valorEsperado := 'extranjero'.	"Act"	valorObtenido := extranjero esExtranjero: nacionalidad.	"Assert"	self assert: valorObtenido equals: valorEsperado! !TestCase subclass: #InternacionalExtranjeroTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Casos-De-Uso'!!InternacionalExtranjeroTest methodsFor: 'tests' stamp: 'Nicolas 4/15/2023 14:01'!test01DadosUnosKmsInternacinalDebeDevolverElValorCorrecto	| valorEsperado valorObtenido kms destino |	"Arrange"	destino := InternacionalExtranjero new.	kms := 4549.	valorEsperado := kms log + 3600 raisedTo: 1.2. "kms - tarifa internacional - recargo extranjero"	"Act"	valorObtenido := destino Kms: kms.	"Assert"	self assert: valorObtenido equals: valorEsperado! !TestCase subclass: #InternacionalTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Casos-De-Uso'!!InternacionalTest methodsFor: 'tests' stamp: 'Nicolas 4/15/2023 13:57'!test01DadosUnosKmsInternacinalDebeDevolverElValorCorrecto	| valorEsperado valorObtenido kms destino |	"Arrange"	destino := Internacional new.	kms := 2000.	valorEsperado := kms log + 3600 * 1.2. "kms - tarifa internacional - recargo turista nacional"	"Act"	valorObtenido := destino Kms: kms.	"Assert"	self assert: valorObtenido equals: valorEsperado! !TestCase subclass: #MercosurExtranjeroTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Casos-De-Uso'!!MercosurExtranjeroTest methodsFor: 'tests' stamp: 'Nicolas 4/15/2023 14:05'!test01DadosUnosKmsMercosurExtranjeroDebeDevolverElValorCorrecto	| valorEsperado valorObtenido kms destino |	"Arrange"	destino := MercosurExtranjero new.	kms := 5000.	valorEsperado := (kms raisedTo: 1.12) raisedTo: 1.2. "kms - tarifa mercosur - recargo turista extranjero"	"Act"	valorObtenido := destino Kms: kms.	"Assert"	self assert: valorObtenido equals: valorEsperado! !TestCase subclass: #MercosurTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Casos-De-Uso'!!MercosurTest methodsFor: 'tests' stamp: 'Nicolas 4/15/2023 14:03'!test01DadosUnosKmsMercosurDebeDevolverElValorCorrecto	| valorEsperado valorObtenido kms destino |	"Arrange"	destino := Mercosur new.	kms := 2000.	valorEsperado := (kms raisedTo: 1.12) * 1.2. "kms - tarifa mercosur - recargo turista nacional"	"Act"	valorObtenido := destino Kms: kms.	"Assert"	self assert: valorObtenido equals: valorEsperado! !TestCase subclass: #NacionalExtranjeroTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Casos-De-Uso'!!NacionalExtranjeroTest methodsFor: 'tests' stamp: 'Nicolas 4/15/2023 13:52'!test01DadosUnosKmsNacionalExtranjeroDebeDevolverElValorCorrecto	| valorEsperado valorObtenido kms destino |	"Arrange"	destino := NacionalExtranjero new.	kms := 3450.	valorEsperado := kms * 1.28 - 1500 raisedTo: 1.2. "kms - tarifa nacional - descuento extranjero turista nacional - recargo extranjero"	"Act"	valorObtenido := destino Kms: kms.	"Assert"	self assert: valorObtenido equals: valorEsperado! !TestCase subclass: #NacionalTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Casos-De-Uso'!!NacionalTest methodsFor: 'tests' stamp: 'Nicolas 4/15/2023 13:48'!test01DadosUnosKmsNacionalDebeDevolverElValorCorrecto	| valorEsperado valorObtenido kms destino |	"Arrange"	destino := Nacional new.	kms := 2000.	valorEsperado := (kms * 1.28) sqrt * 1.2. "kms - tarifa nacional - descuento ley de impulso nacional - recargo turista nacional"	"Act"	valorObtenido := destino Kms: kms.		"Assert"	self assert: valorObtenido equals: valorEsperado ! !TestCase subclass: #PasajeTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Casos-De-Uso'!!PasajeTest methodsFor: 'tests' stamp: 'Nicolas 4/15/2023 14:16'!test01PasajeDebeGuardarYDevolverLaCiudadEsperadaCorrecta	| ciudadEsperada ciudadObtenida pasaje |	"Arrange"	pasaje := Pasaje		          Nacionalidad: 'Italiana'		          Destino: 'Frankfurt'		          Pais: 'Alemania'		          Kms: 11000.			ciudadEsperada := CiudadEsperada nombre: 'Frankfurt' en: 'Alemania'.		"Act"	ciudadObtenida := pasaje destino.		"Assert"	self assert: ciudadObtenida equals: ciudadEsperada  ! !TestCase subclass: #TarifaTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Casos-De-Uso'!!TarifaTest methodsFor: 'tests' stamp: 'Nicolas 4/15/2023 14:48'!test05TarifaDebeEstablecerYDevolverElValorCorrectoParaUnExtranjeroConDestinoMercosur	| valorEsperado valorObtenido tarifa kms |	"Arrange"	kms := 5000.	tarifa := Tarifa new.	tarifa		dadaNacionalidad: 'Alemana'		dadoPaisDestino: 'Peru'		dadosKms: kms.	"Act"	valorObtenido := tarifa establecerCosto.	valorEsperado := (kms raisedTo: 1.12) raisedTo: 1.2.	"Assert"	self assert: valorObtenido equals: valorEsperado! !!TarifaTest methodsFor: 'tests' stamp: 'Nicolas 4/15/2023 14:39'!test01TarifaDebeEstablecerYDevolverElValorCorrectoParaUnExtranjeroConDestinoNacional	| valorEsperado valorObtenido tarifa kms |	"Arrange"	kms := 5000.	tarifa := Tarifa new.	tarifa		dadaNacionalidad: 'Española'		dadoPaisDestino: 'Argentina'		dadosKms: kms.	"Act"	valorObtenido := tarifa establecerCosto.	valorEsperado := kms * 1.28 - 1500 raisedTo: 1.2.	"Assert"	self assert: valorObtenido equals: valorEsperado! !!TarifaTest methodsFor: 'tests' stamp: 'Nicolas 4/15/2023 14:42'!test02TarifaDebeEstablecerYDevolverElValorCorrectoParaUnNoExtranjeroConDestinoNacional	| valorEsperado valorObtenido tarifa kms |	"Arrange"	kms := 5000.	tarifa := Tarifa new.	tarifa		dadaNacionalidad: 'Argentina'		dadoPaisDestino: 'Argentina'		dadosKms: kms.	"Act"	valorObtenido := tarifa establecerCosto.	valorEsperado := (kms * 1.28) sqrt * 1.2.	"Assert"	self assert: valorObtenido equals: valorEsperado! !!TarifaTest methodsFor: 'tests' stamp: 'Nicolas 4/15/2023 14:45'!test04TarifaDebeEstablecerYDevolverElValorCorrectoParaUnExtranjeroConDestinoInternacional	| valorEsperado valorObtenido tarifa kms |	"Arrange"	kms := 5000.	tarifa := Tarifa new.	tarifa		dadaNacionalidad: 'Italiana'		dadoPaisDestino: 'Alemania'		dadosKms: kms.	"Act"	valorObtenido := tarifa establecerCosto.	valorEsperado := kms log + 3600 raisedTo: 1.2.	"Assert"	self assert: valorObtenido equals: valorEsperado! !!TarifaTest methodsFor: 'tests' stamp: 'Nicolas 4/15/2023 14:42'!test03TarifaDebeEstablecerYDevolverElValorCorrectoParaUnNoExtranjeroConDestinoInternacional	| valorEsperado valorObtenido tarifa kms |	"Arrange"	kms := 5000.	tarifa := Tarifa new.	tarifa		dadaNacionalidad: 'Argentina'		dadoPaisDestino: 'Alemania'		dadosKms: kms.	"Act"	valorObtenido := tarifa establecerCosto.	valorEsperado := kms log + 3600 * 1.2.	"Assert"	self assert: valorObtenido equals: valorEsperado! !!TarifaTest methodsFor: 'tests' stamp: 'Nicolas 4/15/2023 14:47'!test05TarifaDebeEstablecerYDevolverElValorCorrectoParaUnNoExtranjeroConDestinoMercosur	| valorEsperado valorObtenido tarifa kms |	"Arrange"	kms := 5000.	tarifa := Tarifa new.	tarifa		dadaNacionalidad: 'Argentina'		dadoPaisDestino: 'Peru'		dadosKms: kms.	"Act"	valorObtenido := tarifa establecerCosto.	valorEsperado := (kms raisedTo: 1.12) * 1.2.	"Assert"	self assert: valorObtenido equals: valorEsperado! !